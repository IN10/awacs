#!/usr/bin/env ruby

require 'rubygems'
require 'tty-spinner'
require 'tmpdir'

require_relative 'src/Results'
require_relative 'src/checks/BrokenImages'
require_relative 'src/checks/BrokenLinks'
require_relative 'src/checks/BrokenScripts'
require_relative 'src/checks/BrokenStylesheets'
require_relative 'src/checks/Check'
require_relative 'src/checks/InvalidHTML'
require_relative 'src/checks/LogAnalyzer'
require_relative 'src/checks/PrintsErrors'
require_relative 'src/checks/PrintsLorem'
require_relative 'src/checks/URLTester'
require_relative 'src/IO/Arguments'
require_relative 'src/IO/Debugger'
require_relative 'src/IO/UrlLookup'
require_relative 'src/IO/usage_instructions'
require_relative 'src/IO/exporters/Table'

# Parse command line arguments
args = Arguments.new(ARGV)
scope = args.scope
silent = args.hasAny? '--silent', '-s'
debugMode = args.hasAny? '--debug', '-d'

if args.hasAny? '--version', '-v'
    puts "awacs version 1.0.0\n" unless silent
    exit 0
end

if args.hasAny? '--help', '-h'
    usage_instructions unless silent
    exit 0
end

# Show usage instructions when no start url is given
unless scope
    usage_instructions unless silent
    exit 1
end

# --silent and --debug cannot be combined
exit 1 if (silent && debugMode)

# Fail when unknown options are encountered
unknown_options = args.unknown_options
if unknown_options.count > 0
    unknown_options.each { |o| puts "Error: unknown option #{o}" } unless silent
    exit 1
end

# Flag used to determine whether we want to show a spinner, formatted table, etc.
fancyUI = !silent && !debugMode

# Show spinner
if fancyUI
    spinner = TTY::Spinner.new "[:spinner] :operation"
    spinner.update operation: 'Initializing'
    spinner.auto_spin
end

# Initialize debug output
$d = Debugger.new debugMode

# Output variable scoped to program
results = Results.new

# Define checks to run
checks = [
    PrintsErrors.new(args),
    PrintsLorem.new(args),
    BrokenLinks.new(args),
    BrokenImages.new(args),
    BrokenStylesheets.new(args),
    BrokenScripts.new(args),
    InvalidHTML.new(args),
]
# Skip all checks marked as slow when --fast is given
checks.reject!(&:slow) if args.hasAny? '--fast', '-f'

# If needed, create a temporary directory for us to use
if args.hasAny? '--folder'
    directory = args.folder
    clean_up_directory = false

    # Sanity checks: folder exists, is writeable
    if !File.writable?(directory)
        puts "Error: the selected output folder (--folder) does not exist, or is not writeable" unless silent
        exit 4
    end

    # Sanity check: folder is initially empty
    if !Dir["#{directory}/*"].empty?
        puts "Error: the selected output folder (--folder) is not empty" unless silent
        exit 5
    end
else
    directory = Dir.mktmpdir
    clean_up_directory = true
end

# Main process
begin
    $d.debug "Using directory #{directory}"
    spinner.update operation: 'Downloading all pages of the website' if fancyUI

    # Setup authentication if required
    auth = ""
    if args.hasAny? '--username', '--password'
        auth = "--auth-no-challenge --user=#{args.username} --password=#{args.password}"
    end

    # Download the website with wget
    wget = "(cd #{directory}; wget -r -np -nd -nv --follow-tags=a --random-wait -erobots=off -nc -o wget.log #{auth} #{scope})"
    $d.debug "Downloading pages using wget: #{wget}"
    `#{wget}`

    # Check the wget log for errors
    spinner.update operation: 'Analyzing download log file' if fancyUI
    logFile = "#{directory}/wget.log"
    analyzer = LogAnalyzer.new logFile, results
    analyzer.analyze

    spinner.update operation: 'Checking for problems in downloaded pages' if fancyUI
    lookup = UrlLookup.new(File.open(directory+'/wget.log').read)

    # Iterate over all downloaded files
    files = Dir.glob("#{directory}/*").select { |f| !f.end_with? 'wget.log' }
    pages = files.map do |path|
        # Read the file
        $d.debug "processing #{path}"
        contents = File.open(path, "r").read
        url = lookup.original_url_for path

        # Feed it to each checker
        output = results.addPage url
        checks.each do |checker|
            output.concat(checker.check(contents))
        end
        $d.debug "#{output.flatten(1).count} errors/warnings"
    end
ensure
    # Clean up the temp directory
    FileUtils.remove_entry(directory) if clean_up_directory
end

# Filter results if --errors or --warnings was given
showErrors = args.hasAny? '-e', '--errors'
showWarnings = args.hasAny? '-w', '--warnings'
results.removeSuccesses! if showErrors || showWarnings
results.removeErrors! if !showErrors && showWarnings
results.removeWarnings! if showErrors && !showWarnings

# Format results
if fancyUI
    spinner.update(operation: 'All done')
    spinner.success
    spinner.update operation: 'Filtering results'

    table = Table.new results
    puts table.render
end

# Exit with proper return code
if results.hasErrors?
    $d.debug "done, found errors"
    exit 2
elsif results.hasWarnings?
    $d.debug "done, found warnings"
    exit 3
else
    $d.debug "done, found no errors and no warnings"
    exit 0
end
