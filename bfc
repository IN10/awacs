#!/usr/bin/env ruby

require 'rubygems'
require 'tty-spinner'
require 'tmpdir'

require_relative 'src/Formatter.rb'
require_relative 'src/Debugger.rb'
require_relative 'src/Results.rb'
require_relative 'src/checks/PrintsErrors.rb'

def usage_instructions
    puts "Usage: bfc [scope] [options]"
    puts "Scope should be a website directory, e.g. http://in10.nl/nieuws"
    puts "Options: --silent, --debug, --errors-only, --help. See readme.md"
end

# Parse command line arguments
scope = ARGV[0]
errorsOnly = ARGV.include? '--errors-only'
silent = ARGV.include? '--silent'
debugMode = ARGV.include? '--debug'
help = ARGV.include?('--help') || ARGV.include?('-h')
version = ARGV.include?('--version') || ARGV.include?('-v')

if version
    puts "bfc version 1.0.0\n" unless silent
    exit 0
end

if help
    usage_instructions unless silent
    exit 0
end

# Show usage instructions when no start url is given
if !scope || scope.start_with?('-')
    usage_instructions unless silent
    exit 1
end

# --silent and --debug cannot be combined
exit 1 if (silent && debugMode)

# Fail when unknown options are encountered
ARGV.shift # remove the scope from consideration
unknown_options = ARGV - ['--errors-only', '--silent', '--debug']
if unknown_options.count > 0
    unknown_options.each { |o| puts "Error: unknown option #{o}" } unless silent
    exit 1
end

# Flag used to determine whether we want to show a spinner, formatted table, etc.
fancyUI = !silent && !debugMode

# Show spinner
if fancyUI
    spinner = TTY::Spinner.new "[:spinner] :operation"
    spinner.update operation: 'Initializing'
    spinner.auto_spin
end

# Initialize debug output
d = Debugger.new debugMode

# Output variable scoped to program
results = Results.new

# Define checks to run
checks = [PrintsErrors.new]

# Create a temporary directory for us to use
spinner.update operation: 'Creating temporary directory' if fancyUI
Dir.mktmpdir do |directory|
    d.debug "Using temporary directory #{directory}"
    spinner.update operation: 'Downloading all pages of the website' if fancyUI

    # Download the website with wget
    wget = "(cd #{directory}; wget -r -np --follow-tags=a --random-wait -erobots=off -nc #{scope})"
    d.debug "Downloading pages using wget: #{wget}"
    `#{wget}`

    # Iterate over all downloaded files
    spinner.update operation: 'Checking for problems' if fancyUI
    files = Dir.glob("#{directory}/**/*").select {|f| !File.directory? f}
    pages = files.map do |path|
        d.debug "processing #{path}"
        # # Read the file, feed it to all checkers
        contents = File.open(path, "r").read
        url = path.sub directory+"/", ""

        output = results.addPage url
        checks.each do |checker|
            output << checker.check(contents)
        end
        d.debug "#{output.flatten(1).count} errors/warnings"
    end
end

# Format results
if fancyUI
    spinner.update(operation: 'All done')
    spinner.success
    spinner.update operation: 'Filtering results'

    formatter = Formatter.new results, errorsOnly
    puts formatter.render
end

# Exit with proper return code
if results.hasErrors?
    d.debug "done, found errors"
    exit 2
elsif results.hasWarnings?
    d.debug "done, found warnings"
    exit 3
else
    d.debug "done, found no errors and no warnings"
    exit 0
end
